From 93c73f7532a332cf031c8827320bcb84daa6459b Mon Sep 17 00:00:00 2001
From: Jens Reidel <jens@troet.org>
Date: Sun, 24 May 2020 17:08:05 +0200
Subject: [PATCH] Support orjson, custom intents, ratelimit warnings -> debug

---
 discord/gateway.py | 5 +++--
 discord/http.py    | 8 ++++----
 discord/utils.py   | 2 +-
 3 files changed, 8 insertions(+), 7 deletions(-)

diff --git a/discord/gateway.py b/discord/gateway.py
index 89f4e0b..a61eb38 100644
--- a/discord/gateway.py
+++ b/discord/gateway.py
@@ -317,6 +317,7 @@ class DiscordWebSocket:
         payload = {
             'op': self.IDENTIFY,
             'd': {
+                'intents': 13953,
                 'token': self.token,
                 'properties': {
                     '$os': sys.platform,
@@ -526,7 +527,7 @@ class DiscordWebSocket:
 
     async def send(self, data):
         self._dispatch('socket_raw_send', data)
-        await self.socket.send_str(data)
+        await self.socket.send_bytes(data)
 
     async def send_as_json(self, data):
         try:
@@ -648,7 +649,7 @@ class DiscordVoiceWebSocket:
 
     async def send_as_json(self, data):
         log.debug('Sending voice websocket frame: %s.', data)
-        await self.ws.send_str(utils.to_json(data))
+        await self.ws.send_bytes(utils.to_json(data))
 
     async def resume(self):
         state = self._connection
diff --git a/discord/http.py b/discord/http.py
index b978962..00d5041 100644
--- a/discord/http.py
+++ b/discord/http.py
@@ -120,7 +120,7 @@ class HTTPClient:
             'proxy_auth': self.proxy_auth,
             'proxy': self.proxy,
             'max_msg_size': 0,
-            'timeout': 30.0,
+            'timeout': aiohttp.client_ws.ClientWSTimeout(ws_close=30.0),
             'autoclose': False,
             'headers': {
                 'User-Agent': self.user_agent,
@@ -211,12 +211,12 @@ class HTTPClient:
 
                             # sleep a bit
                             retry_after = data['retry_after'] / 1000.0
-                            log.warning(fmt, retry_after, bucket)
+                            log.debug(fmt, retry_after, bucket)
 
                             # check if it's a global rate limit
                             is_global = data.get('global', False)
                             if is_global:
-                                log.warning('Global rate limit has been hit. Retrying in %.2f seconds.', retry_after)
+                                log.debug('Global rate limit has been hit. Retrying in %.2f seconds.', retry_after)
                                 self._global_over.clear()
 
                             await asyncio.sleep(retry_after)
@@ -374,7 +374,7 @@ class HTTPClient:
         if allowed_mentions:
             payload['allowed_mentions'] = allowed_mentions
 
-        form.add_field('payload_json', utils.to_json(payload))
+        form.add_field('payload_json', utils.to_json(payload).decode("utf-8"))
         if len(files) == 1:
             file = files[0]
             form.add_field('file', file.fp, filename=file.filename, content_type='application/octet-stream')
diff --git a/discord/utils.py b/discord/utils.py
index 46f35bd..df42c50 100644
--- a/discord/utils.py
+++ b/discord/utils.py
@@ -301,7 +301,7 @@ def _bytes_to_base64_data(data):
     return fmt.format(mime=mime, data=b64)
 
 def to_json(obj):
-    return json.dumps(obj, separators=(',', ':'), ensure_ascii=True)
+    return json.dumps(obj)
 
 def _parse_ratelimit_header(request, *, use_clock=False):
     reset_after = request.headers.get('X-Ratelimit-Reset-After')
-- 
2.26.2

