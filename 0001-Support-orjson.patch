From 058c7ac1620013bf10641142dde49a93d1ea1501 Mon Sep 17 00:00:00 2001
From: Jens Reidel <jens@troet.org>
Date: Wed, 27 May 2020 15:33:41 +0200
Subject: [PATCH] Patches

---
 discord/gateway.py | 15 +++++++++++----
 discord/guild.py   | 15 +++++++++++++--
 discord/http.py    |  4 ++--
 discord/state.py   |  4 ++--
 discord/utils.py   |  2 +-
 5 files changed, 29 insertions(+), 11 deletions(-)

diff --git a/discord/gateway.py b/discord/gateway.py
index 2087d6f..78acf10 100644
--- a/discord/gateway.py
+++ b/discord/gateway.py
@@ -317,6 +317,7 @@ class DiscordWebSocket:
         payload = {
             'op': self.IDENTIFY,
             'd': {
+                'intents': 13955,
                 'token': self.token,
                 'properties': {
                     '$os': sys.platform,
@@ -530,7 +531,7 @@ class DiscordWebSocket:
 
     async def send(self, data):
         self._dispatch('socket_raw_send', data)
-        await self.socket.send_str(data)
+        await self.socket.send_bytes(data)
 
     async def send_as_json(self, data):
         try:
@@ -569,12 +570,11 @@ class DiscordWebSocket:
         }
         await self.send_as_json(payload)
 
-    async def request_chunks(self, guild_id, query, limit, *, nonce=None):
+    async def request_chunks(self, guild_id, query=None, *, limit, user_ids=None, nonce=None):
         payload = {
             'op': self.REQUEST_MEMBERS,
             'd': {
                 'guild_id': guild_id,
-                'query': query,
                 'limit': limit
             }
         }
@@ -582,6 +582,13 @@ class DiscordWebSocket:
         if nonce:
             payload['d']['nonce'] = nonce
 
+        if user_ids:
+            payload['d']['user_ids'] = user_ids
+
+        if query is not None:
+            payload['d']['query'] = query
+
+
         await self.send_as_json(payload)
 
     async def voice_state(self, guild_id, channel_id, self_mute=False, self_deaf=False):
@@ -656,7 +663,7 @@ class DiscordVoiceWebSocket:
 
     async def send_as_json(self, data):
         log.debug('Sending voice websocket frame: %s.', data)
-        await self.ws.send_str(utils.to_json(data))
+        await self.ws.send_bytes(utils.to_json(data))
 
     async def resume(self):
         state = self._connection
diff --git a/discord/guild.py b/discord/guild.py
index 04a532d..b80c43b 100644
--- a/discord/guild.py
+++ b/discord/guild.py
@@ -1881,7 +1881,7 @@ class Guild(Hashable):
 
         return Widget(state=self._state, data=data)
 
-    async def query_members(self, query, *, limit=5, cache=True):
+    async def query_members(self, query=None, *, limit=5, user_ids=None, cache=True):
         """|coro|
 
         Request members that belong to this guild whose username starts with
@@ -1907,6 +1907,11 @@ class Guild(Hashable):
         cache: :class:`bool`
             Whether to cache the members internally. This makes operations
             such as :meth:`get_member` work for those that matched.
+        user_ids: List[:class:`int`]
+            List of user IDs to search for. If the user ID is not in the guild then it won't be returned.
+
+            .. versionadded:: 1.4
+
 
         Raises
         -------
@@ -1918,5 +1923,11 @@ class Guild(Hashable):
         List[:class:`Member`]
             The list of members that have matched the query.
         """
+        if user_ids is not None and query is not None:
+            raise TypeError('Cannot pass both query and user_ids')
+
+        if user_ids is None and query is None:
+            raise TypeError('Must pass either query or user_ids')
+
         limit = limit or 5
-        return await self._state.query_members(self, query=query, limit=limit, cache=cache)
+        return await self._state.query_members(self, query=query, limit=limit, user_ids=user_ids, cache=cache)
diff --git a/discord/http.py b/discord/http.py
index 2a4458e..f594e58 100644
--- a/discord/http.py
+++ b/discord/http.py
@@ -120,7 +120,7 @@ class HTTPClient:
             'proxy_auth': self.proxy_auth,
             'proxy': self.proxy,
             'max_msg_size': 0,
-            'timeout': 30.0,
+            'timeout': aiohttp.client_ws.ClientWSTimeout(ws_close=30.0),
             'autoclose': False,
             'headers': {
                 'User-Agent': self.user_agent,
@@ -374,7 +374,7 @@ class HTTPClient:
         if allowed_mentions:
             payload['allowed_mentions'] = allowed_mentions
 
-        form.add_field('payload_json', utils.to_json(payload))
+        form.add_field('payload_json', utils.to_json(payload).decode("utf-8"))
         if len(files) == 1:
             file = files[0]
             form.add_field('file', file.fp, filename=file.filename, content_type='application/octet-stream')
diff --git a/discord/state.py b/discord/state.py
index ef4c069..bee5599 100644
--- a/discord/state.py
+++ b/discord/state.py
@@ -339,7 +339,7 @@ class ConnectionState:
             else:
                 log.info('Finished requesting guild member chunks for %d guilds.', len(guilds))
 
-    async def query_members(self, guild, query, limit, cache):
+    async def query_members(self, guild, query, limit, user_ids, cache):
         guild_id = guild.id
         ws = self._get_websocket(guild_id)
         if ws is None:
@@ -354,7 +354,7 @@ class ConnectionState:
         future = self.receive_member_query(guild_id, nonce)
         try:
             # start the query operation
-            await ws.request_chunks(guild_id, query, limit, nonce=nonce)
+            await ws.request_chunks(guild_id, query=query, limit=limit, user_ids=user_ids, nonce=nonce)
             members = await asyncio.wait_for(future, timeout=5.0)
 
             if cache:
diff --git a/discord/utils.py b/discord/utils.py
index 3124a73..fad817f 100644
--- a/discord/utils.py
+++ b/discord/utils.py
@@ -301,7 +301,7 @@ def _bytes_to_base64_data(data):
     return fmt.format(mime=mime, data=b64)
 
 def to_json(obj):
-    return json.dumps(obj, separators=(',', ':'), ensure_ascii=True)
+    return json.dumps(obj)
 
 def _parse_ratelimit_header(request, *, use_clock=False):
     reset_after = request.headers.get('X-Ratelimit-Reset-After')
-- 
2.26.2

